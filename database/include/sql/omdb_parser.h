/* Copyright (c) 2016 Neil Moore, Jason Stavrinaky, Micheal McGee, Robert Medina
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this 
 * software and associated documentation files (the "Software"), to deal in the Software 
 * without restriction, including without limitation the rights to use, copy, modify, 
 * merge, publish, distribute, sublicense, and/or sell copies of the Software, and to 
 * permit persons to whom the Software is furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all copies 
 * or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, 
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR 
 * PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE 
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, 
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE 
 * USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

#ifndef SQL_OMDB_PARSER_H
#define SQL_OMDB_PARSER_H

// C standard library includes
#include <cstdio>
#include <cstdint>
#include <cassert>

// C++ standard library includes
#include <string>

// Project includes
#include "parser/parse.h"
#include "util/result.h"
#include "util/common.h"
#include "statements/common.h"
#include "statements/builder.h"
#include "statements/data_definition.h"

// Needed for the parser generated by Lemon
typedef uint64_t u64;

/* TODO: Come back and rework this whole type system. */
/**
 *  \brief All the information related to a token needed by the parser
 */
struct TokenPair
{
  //! The actual token
  Token token;

  //! The token type
  uint32_t token_type;
};

using ParseResult = Result<ParsedStatement*>;

void setupTokenMappings();

void token_print(Token token);

std::vector<TokenPair> tokenize(std::string input);

struct Parse;

class DataStore;

ParseResult parse(std::string input, DataStore* data_store);

#define NEVER(X) 0

#endif
